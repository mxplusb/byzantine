syntax = "proto3";

import "google/api/annotations.proto";

package byzantine;

/// Publication is the message sent out to the brokers, who pass it along to the subscribers.
message Publication {
    uint32 PubType = 1;
    uint64 PublisherID = 2;
    sint64 PublicationID = 3;
    uint64 TopicID = 4;
    uint64 BrokerID = 5;
    repeated bytes Contents = 6;
    bytes MAC = 7;
    repeated ChainMAC ChainMACs = 8;
}

/// Publisher defines a publisher within a quorum.
message Publisher {
    string Address = 1;
    uint64 PublisherID = 2;
}

/// Subscriber defines a subscriber within a subscriber pool.
message Subscriber {
    string Address = 1;
    uint64 PoolID = 2;
    uint64 DestinationDistinguishment = 3;
}

message PubResponse {
    bool Success = 1;
}

message SubRequest {
    uint64 PublisherID = 1;
    uint64 BrokerID = 2;
}


message ChainMAC {
    string From = 1;
    string To = 2;
    bytes MAC = 3;
}

message ChainResponse {
    bool Valid = 1;
}

message EchoResponse {
    bool Hello = 1;
}

message ReadyResponse {
    bool Ready = 1;
}

service Subscribe {
    rpc Subscribe (SubRequest) returns (ReadyResponse) {
        option (google.api.http) = {
            post: "/subscriber/subscribe"
            body: "*"
        };
    }
}

service Broker {
    rpc Echo (Publication) returns (EchoResponse) {
        option (google.api.http) = {
            post: "/broker/echo"
            body: "*"
        };
    }

    rpc GetSubscribers (Subscriber) returns (stream Subscriber) {
        option (google.api.http).get = "/broker/subscribers";
    }

    rpc RegisterSubscriber (Subscriber) returns (ReadyResponse) {
        option (google.api.http) = {
            post: "/broker/register/{PoolID}"
            body: "*"
        };
    }

    rpc Ready (Publication) returns (ReadyResponse) {
        option (google.api.http) = {
            post: "/broker/ready"
            body: "*"
        };
    }

    rpc Receive (Publication) returns (PubResponse) {
        option (google.api.http) = {
            post: "/broker/pull/{PublisherID}"
            body: "*"
        };
    }

    rpc Push (stream SubRequest) returns (stream Publication) {
        option (google.api.http).get = "/broker/push";
    }

    rpc Chain (Publication) returns (ChainResponse) {}
}