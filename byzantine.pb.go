// Code generated by protoc-gen-gogo.
// source: byzantine.proto
// DO NOT EDIT!

/*
	Package byzantine is a generated protocol buffer package.

	It is generated from these files:
		byzantine.proto

	It has these top-level messages:
		Publication
		PublicationIndex
		DataLocation
		Publisher
		Subscriber
		PubResponse
		SubRequest
		ChainMAC
		ChainResponse
		EchoResponse
		ReadyResponse
*/
package byzantine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// / Publication is the message sent out to the broker.
type Publication struct {
	PublisherID uint64   `protobuf:"varint,1,opt,name=PublisherID,proto3" json:"PublisherID,omitempty"`
	TopicID     uint64   `protobuf:"varint,2,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	BrokerID    uint64   `protobuf:"varint,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	Contents    [][]byte `protobuf:"bytes,4,rep,name=Contents" json:"Contents,omitempty"`
}

func (m *Publication) Reset()                    { *m = Publication{} }
func (m *Publication) String() string            { return proto.CompactTextString(m) }
func (*Publication) ProtoMessage()               {}
func (*Publication) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{0} }

func (m *Publication) GetPublisherID() uint64 {
	if m != nil {
		return m.PublisherID
	}
	return 0
}

func (m *Publication) GetTopicID() uint64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *Publication) GetBrokerID() uint64 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

func (m *Publication) GetContents() [][]byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

// / PublicationIndex is the cache pointer of where data actually lives.
type PublicationIndex struct {
	Index string          `protobuf:"bytes,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Nodes []*DataLocation `protobuf:"bytes,2,rep,name=Nodes" json:"Nodes,omitempty"`
}

func (m *PublicationIndex) Reset()                    { *m = PublicationIndex{} }
func (m *PublicationIndex) String() string            { return proto.CompactTextString(m) }
func (*PublicationIndex) ProtoMessage()               {}
func (*PublicationIndex) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{1} }

func (m *PublicationIndex) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PublicationIndex) GetNodes() []*DataLocation {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DataLocation struct {
	Node  string `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	Start uint32 `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	Stop  uint32 `protobuf:"varint,3,opt,name=Stop,proto3" json:"Stop,omitempty"`
}

func (m *DataLocation) Reset()                    { *m = DataLocation{} }
func (m *DataLocation) String() string            { return proto.CompactTextString(m) }
func (*DataLocation) ProtoMessage()               {}
func (*DataLocation) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{2} }

func (m *DataLocation) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DataLocation) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *DataLocation) GetStop() uint32 {
	if m != nil {
		return m.Stop
	}
	return 0
}

// / Publisher defines a publisher within a quorum.
type Publisher struct {
	Address     string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PublisherID uint64 `protobuf:"varint,2,opt,name=PublisherID,proto3" json:"PublisherID,omitempty"`
}

func (m *Publisher) Reset()                    { *m = Publisher{} }
func (m *Publisher) String() string            { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()               {}
func (*Publisher) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{3} }

func (m *Publisher) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Publisher) GetPublisherID() uint64 {
	if m != nil {
		return m.PublisherID
	}
	return 0
}

// / Subscriber defines a subscriber within a subscriber pool.
type Subscriber struct {
	Address                    string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PoolID                     uint64 `protobuf:"varint,2,opt,name=PoolID,proto3" json:"PoolID,omitempty"`
	DestinationDistinguishment uint64 `protobuf:"varint,3,opt,name=DestinationDistinguishment,proto3" json:"DestinationDistinguishment,omitempty"`
}

func (m *Subscriber) Reset()                    { *m = Subscriber{} }
func (m *Subscriber) String() string            { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()               {}
func (*Subscriber) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{4} }

func (m *Subscriber) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Subscriber) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *Subscriber) GetDestinationDistinguishment() uint64 {
	if m != nil {
		return m.DestinationDistinguishment
	}
	return 0
}

type PubResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *PubResponse) Reset()                    { *m = PubResponse{} }
func (m *PubResponse) String() string            { return proto.CompactTextString(m) }
func (*PubResponse) ProtoMessage()               {}
func (*PubResponse) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{5} }

func (m *PubResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SubRequest struct {
	PublisherID uint64 `protobuf:"varint,1,opt,name=PublisherID,proto3" json:"PublisherID,omitempty"`
	BrokerID    uint64 `protobuf:"varint,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{6} }

func (m *SubRequest) GetPublisherID() uint64 {
	if m != nil {
		return m.PublisherID
	}
	return 0
}

func (m *SubRequest) GetBrokerID() uint64 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

type ChainMAC struct {
	From string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	MAC  []byte `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
}

func (m *ChainMAC) Reset()                    { *m = ChainMAC{} }
func (m *ChainMAC) String() string            { return proto.CompactTextString(m) }
func (*ChainMAC) ProtoMessage()               {}
func (*ChainMAC) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{7} }

func (m *ChainMAC) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChainMAC) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChainMAC) GetMAC() []byte {
	if m != nil {
		return m.MAC
	}
	return nil
}

type ChainResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (m *ChainResponse) Reset()                    { *m = ChainResponse{} }
func (m *ChainResponse) String() string            { return proto.CompactTextString(m) }
func (*ChainResponse) ProtoMessage()               {}
func (*ChainResponse) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{8} }

func (m *ChainResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type EchoResponse struct {
	Hello bool `protobuf:"varint,1,opt,name=Hello,proto3" json:"Hello,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{9} }

func (m *EchoResponse) GetHello() bool {
	if m != nil {
		return m.Hello
	}
	return false
}

type ReadyResponse struct {
	Ready bool `protobuf:"varint,1,opt,name=Ready,proto3" json:"Ready,omitempty"`
}

func (m *ReadyResponse) Reset()                    { *m = ReadyResponse{} }
func (m *ReadyResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadyResponse) ProtoMessage()               {}
func (*ReadyResponse) Descriptor() ([]byte, []int) { return fileDescriptorByzantine, []int{10} }

func (m *ReadyResponse) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func init() {
	proto.RegisterType((*Publication)(nil), "byzantine.Publication")
	proto.RegisterType((*PublicationIndex)(nil), "byzantine.PublicationIndex")
	proto.RegisterType((*DataLocation)(nil), "byzantine.DataLocation")
	proto.RegisterType((*Publisher)(nil), "byzantine.Publisher")
	proto.RegisterType((*Subscriber)(nil), "byzantine.Subscriber")
	proto.RegisterType((*PubResponse)(nil), "byzantine.PubResponse")
	proto.RegisterType((*SubRequest)(nil), "byzantine.SubRequest")
	proto.RegisterType((*ChainMAC)(nil), "byzantine.ChainMAC")
	proto.RegisterType((*ChainResponse)(nil), "byzantine.ChainResponse")
	proto.RegisterType((*EchoResponse)(nil), "byzantine.EchoResponse")
	proto.RegisterType((*ReadyResponse)(nil), "byzantine.ReadyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Subscribe service

type SubscribeClient interface {
	Subscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type subscribeClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeClient(cc *grpc.ClientConn) SubscribeClient {
	return &subscribeClient{cc}
}

func (c *subscribeClient) Subscribe(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := grpc.Invoke(ctx, "/byzantine.Subscribe/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscribe service

type SubscribeServer interface {
	Subscribe(context.Context, *SubRequest) (*ReadyResponse, error)
}

func RegisterSubscribeServer(s *grpc.Server, srv SubscribeServer) {
	s.RegisterService(&_Subscribe_serviceDesc, srv)
}

func _Subscribe_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Subscribe/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServer).Subscribe(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subscribe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "byzantine.Subscribe",
	HandlerType: (*SubscribeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Subscribe_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "byzantine.proto",
}

// Client API for Broker service

type BrokerClient interface {
	Echo(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*EchoResponse, error)
	GetSubscribers(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (Broker_GetSubscribersClient, error)
	RegisterSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*ReadyResponse, error)
	Ready(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*ReadyResponse, error)
	Receive(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*PubResponse, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (Broker_PushClient, error)
	Chain(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*ChainResponse, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Echo(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/byzantine.Broker/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GetSubscribers(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (Broker_GetSubscribersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[0], c.cc, "/byzantine.Broker/GetSubscribers", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerGetSubscribersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_GetSubscribersClient interface {
	Recv() (*Subscriber, error)
	grpc.ClientStream
}

type brokerGetSubscribersClient struct {
	grpc.ClientStream
}

func (x *brokerGetSubscribersClient) Recv() (*Subscriber, error) {
	m := new(Subscriber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) RegisterSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := grpc.Invoke(ctx, "/byzantine.Broker/RegisterSubscriber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Ready(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := grpc.Invoke(ctx, "/byzantine.Broker/Ready", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Receive(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*PubResponse, error) {
	out := new(PubResponse)
	err := grpc.Invoke(ctx, "/byzantine.Broker/Receive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Push(ctx context.Context, opts ...grpc.CallOption) (Broker_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[1], c.cc, "/byzantine.Broker/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerPushClient{stream}
	return x, nil
}

type Broker_PushClient interface {
	Send(*SubRequest) error
	Recv() (*Publication, error)
	grpc.ClientStream
}

type brokerPushClient struct {
	grpc.ClientStream
}

func (x *brokerPushClient) Send(m *SubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerPushClient) Recv() (*Publication, error) {
	m := new(Publication)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Chain(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*ChainResponse, error) {
	out := new(ChainResponse)
	err := grpc.Invoke(ctx, "/byzantine.Broker/Chain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	Echo(context.Context, *Publication) (*EchoResponse, error)
	GetSubscribers(*Subscriber, Broker_GetSubscribersServer) error
	RegisterSubscriber(context.Context, *Subscriber) (*ReadyResponse, error)
	Ready(context.Context, *Publication) (*ReadyResponse, error)
	Receive(context.Context, *Publication) (*PubResponse, error)
	Push(Broker_PushServer) error
	Chain(context.Context, *Publication) (*ChainResponse, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Broker/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Echo(ctx, req.(*Publication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GetSubscribers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscriber)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).GetSubscribers(m, &brokerGetSubscribersServer{stream})
}

type Broker_GetSubscribersServer interface {
	Send(*Subscriber) error
	grpc.ServerStream
}

type brokerGetSubscribersServer struct {
	grpc.ServerStream
}

func (x *brokerGetSubscribersServer) Send(m *Subscriber) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_RegisterSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscriber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).RegisterSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Broker/RegisterSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).RegisterSubscriber(ctx, req.(*Subscriber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Broker/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Ready(ctx, req.(*Publication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Broker/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Receive(ctx, req.(*Publication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Push(&brokerPushServer{stream})
}

type Broker_PushServer interface {
	Send(*Publication) error
	Recv() (*SubRequest, error)
	grpc.ServerStream
}

type brokerPushServer struct {
	grpc.ServerStream
}

func (x *brokerPushServer) Send(m *Publication) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerPushServer) Recv() (*SubRequest, error) {
	m := new(SubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Chain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Chain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byzantine.Broker/Chain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Chain(ctx, req.(*Publication))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "byzantine.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Broker_Echo_Handler,
		},
		{
			MethodName: "RegisterSubscriber",
			Handler:    _Broker_RegisterSubscriber_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Broker_Ready_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Broker_Receive_Handler,
		},
		{
			MethodName: "Chain",
			Handler:    _Broker_Chain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSubscribers",
			Handler:       _Broker_GetSubscribers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _Broker_Push_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "byzantine.proto",
}

func (m *Publication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PublisherID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.PublisherID))
	}
	if m.TopicID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.TopicID))
	}
	if m.BrokerID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.BrokerID))
	}
	if len(m.Contents) > 0 {
		for _, b := range m.Contents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintByzantine(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *PublicationIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicationIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.Index)))
		i += copy(dAtA[i:], m.Index)
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintByzantine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DataLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.Start))
	}
	if m.Stop != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.Stop))
	}
	return i, nil
}

func (m *Publisher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publisher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.PublisherID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.PublisherID))
	}
	return i, nil
}

func (m *Subscriber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscriber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.PoolID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.PoolID))
	}
	if m.DestinationDistinguishment != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.DestinationDistinguishment))
	}
	return i, nil
}

func (m *PubResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PublisherID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.PublisherID))
	}
	if m.BrokerID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(m.BrokerID))
	}
	return i, nil
}

func (m *ChainMAC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainMAC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.MAC) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintByzantine(dAtA, i, uint64(len(m.MAC)))
		i += copy(dAtA[i:], m.MAC)
	}
	return i, nil
}

func (m *ChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hello {
		dAtA[i] = 0x8
		i++
		if m.Hello {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReadyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ready {
		dAtA[i] = 0x8
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Byzantine(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Byzantine(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintByzantine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Publication) Size() (n int) {
	var l int
	_ = l
	if m.PublisherID != 0 {
		n += 1 + sovByzantine(uint64(m.PublisherID))
	}
	if m.TopicID != 0 {
		n += 1 + sovByzantine(uint64(m.TopicID))
	}
	if m.BrokerID != 0 {
		n += 1 + sovByzantine(uint64(m.BrokerID))
	}
	if len(m.Contents) > 0 {
		for _, b := range m.Contents {
			l = len(b)
			n += 1 + l + sovByzantine(uint64(l))
		}
	}
	return n
}

func (m *PublicationIndex) Size() (n int) {
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovByzantine(uint64(l))
		}
	}
	return n
}

func (m *DataLocation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovByzantine(uint64(m.Start))
	}
	if m.Stop != 0 {
		n += 1 + sovByzantine(uint64(m.Stop))
	}
	return n
}

func (m *Publisher) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	if m.PublisherID != 0 {
		n += 1 + sovByzantine(uint64(m.PublisherID))
	}
	return n
}

func (m *Subscriber) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovByzantine(uint64(m.PoolID))
	}
	if m.DestinationDistinguishment != 0 {
		n += 1 + sovByzantine(uint64(m.DestinationDistinguishment))
	}
	return n
}

func (m *PubResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *SubRequest) Size() (n int) {
	var l int
	_ = l
	if m.PublisherID != 0 {
		n += 1 + sovByzantine(uint64(m.PublisherID))
	}
	if m.BrokerID != 0 {
		n += 1 + sovByzantine(uint64(m.BrokerID))
	}
	return n
}

func (m *ChainMAC) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	l = len(m.MAC)
	if l > 0 {
		n += 1 + l + sovByzantine(uint64(l))
	}
	return n
}

func (m *ChainResponse) Size() (n int) {
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *EchoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Hello {
		n += 2
	}
	return n
}

func (m *ReadyResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	return n
}

func sovByzantine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozByzantine(x uint64) (n int) {
	return sovByzantine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Publication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherID", wireType)
			}
			m.PublisherID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublisherID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerID", wireType)
			}
			m.BrokerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, make([]byte, postIndex-iNdEx))
			copy(m.Contents[len(m.Contents)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicationIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicationIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicationIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DataLocation{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			m.Stop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Publisher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publisher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publisher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherID", wireType)
			}
			m.PublisherID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublisherID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscriber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscriber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscriber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDistinguishment", wireType)
			}
			m.DestinationDistinguishment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDistinguishment |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherID", wireType)
			}
			m.PublisherID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublisherID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerID", wireType)
			}
			m.BrokerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrokerID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainMAC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainMAC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainMAC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MAC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthByzantine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MAC = append(m.MAC[:0], dAtA[iNdEx:postIndex]...)
			if m.MAC == nil {
				m.MAC = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hello = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipByzantine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthByzantine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipByzantine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowByzantine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowByzantine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthByzantine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowByzantine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipByzantine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthByzantine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowByzantine   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("byzantine.proto", fileDescriptorByzantine) }

var fileDescriptorByzantine = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0xfb, 0x03, 0xf4, 0xd0, 0x22, 0x8e, 0xfc, 0xd4, 0xd5, 0xd4, 0x66, 0x02, 0xb1, 0x21,
	0x91, 0x12, 0xbc, 0xc3, 0xc4, 0x08, 0xad, 0x22, 0x06, 0xb4, 0x99, 0x12, 0xbd, 0xd2, 0xb8, 0xdd,
	0x4e, 0xda, 0x0d, 0xcb, 0x4e, 0xdd, 0x99, 0x1a, 0x91, 0x68, 0xa2, 0x4f, 0x60, 0xe2, 0x4b, 0x79,
	0x69, 0xe2, 0x0b, 0x18, 0xf4, 0xce, 0x97, 0x30, 0x73, 0xf6, 0xa7, 0x03, 0x5a, 0xc2, 0xdd, 0xf9,
	0xce, 0x9c, 0xfd, 0xce, 0xf9, 0xbe, 0x39, 0x93, 0x85, 0x2b, 0x9d, 0xe3, 0xf7, 0x4e, 0xa0, 0xbc,
	0x80, 0xaf, 0x0d, 0x42, 0xa1, 0x04, 0x29, 0xa4, 0x09, 0xfb, 0x66, 0x4f, 0x88, 0x9e, 0xcf, 0xeb,
	0xce, 0xc0, 0xab, 0x3b, 0x41, 0x20, 0x94, 0xa3, 0x3c, 0x11, 0xc8, 0xa8, 0x90, 0x7e, 0xb2, 0x60,
	0xa6, 0x35, 0xec, 0xf8, 0x9e, 0x8b, 0x69, 0x52, 0x8d, 0xa1, 0xec, 0xf3, 0x70, 0xb7, 0x59, 0xb6,
	0xaa, 0x56, 0x2d, 0xc7, 0xcc, 0x14, 0x29, 0xc3, 0xd4, 0x81, 0x18, 0x78, 0xee, 0x6e, 0xb3, 0x9c,
	0xc1, 0xd3, 0x04, 0x12, 0x1b, 0xa6, 0xb7, 0x43, 0x71, 0x88, 0x1f, 0x66, 0xf1, 0x28, 0xc5, 0xfa,
	0xac, 0x21, 0x02, 0xc5, 0x03, 0x25, 0xcb, 0xb9, 0x6a, 0xb6, 0x56, 0x64, 0x29, 0xa6, 0x2f, 0x60,
	0xce, 0x18, 0x61, 0x37, 0xe8, 0xf2, 0x77, 0x64, 0x1e, 0xf2, 0x18, 0xe0, 0x04, 0x05, 0x16, 0x01,
	0x72, 0x07, 0xf2, 0x4f, 0x45, 0x97, 0xcb, 0x72, 0xa6, 0x9a, 0xad, 0xcd, 0x6c, 0x2c, 0xad, 0x8d,
	0x74, 0x37, 0x1d, 0xe5, 0xec, 0x89, 0x88, 0x82, 0x45, 0x55, 0x74, 0x0f, 0x8a, 0x66, 0x9a, 0x10,
	0xc8, 0xe9, 0x83, 0x98, 0x13, 0x63, 0xdd, 0xa8, 0xad, 0x9c, 0x50, 0xa1, 0x98, 0x12, 0x8b, 0x80,
	0xae, 0x6c, 0x2b, 0x31, 0x40, 0x19, 0x25, 0x86, 0x31, 0xdd, 0x81, 0x42, 0xea, 0x83, 0x76, 0x61,
	0xab, 0xdb, 0x0d, 0xb9, 0x94, 0x31, 0x5b, 0x02, 0xcf, 0x3b, 0x98, 0xf9, 0xc7, 0x41, 0xfa, 0x11,
	0xa0, 0x3d, 0xec, 0x48, 0x37, 0xf4, 0x3a, 0x17, 0x32, 0x2d, 0xc2, 0x64, 0x4b, 0x08, 0x3f, 0x25,
	0x89, 0x11, 0xb9, 0x0f, 0x76, 0x93, 0x4b, 0xe5, 0x05, 0xa8, 0xaa, 0xe9, 0xe9, 0xb0, 0x37, 0xf4,
	0x64, 0xff, 0x88, 0x07, 0x2a, 0x76, 0xfe, 0x82, 0x0a, 0x7a, 0x1b, 0x27, 0x64, 0x5c, 0x0e, 0x44,
	0x20, 0xb9, 0x1e, 0xa0, 0x3d, 0x74, 0xdd, 0x64, 0x80, 0x69, 0x96, 0x40, 0xfa, 0x04, 0x07, 0x65,
	0xfc, 0xcd, 0x90, 0x4b, 0x75, 0x89, 0xd5, 0x30, 0x17, 0x20, 0x73, 0x76, 0x01, 0xe8, 0x03, 0x98,
	0x6e, 0xf4, 0x1d, 0x2f, 0xd8, 0xdf, 0x6a, 0x68, 0x77, 0x1f, 0x85, 0xe2, 0x28, 0xb9, 0x07, 0x1d,
	0x93, 0x59, 0xc8, 0x1c, 0x08, 0xfc, 0xaa, 0xc0, 0x32, 0x07, 0x82, 0xcc, 0x41, 0x76, 0x7f, 0xab,
	0x81, 0x6a, 0x8a, 0x4c, 0x87, 0x74, 0x05, 0x4a, 0xc8, 0x90, 0x0e, 0x3e, 0x0f, 0xf9, 0xe7, 0x8e,
	0xef, 0x75, 0xe3, 0xb1, 0x23, 0x40, 0x97, 0xa1, 0xf8, 0xd0, 0xed, 0x0b, 0xb3, 0xea, 0x31, 0xf7,
	0x7d, 0x91, 0x54, 0x21, 0xd0, 0x64, 0x8c, 0x3b, 0xdd, 0x63, 0xb3, 0x0c, 0x13, 0x49, 0x19, 0x82,
	0x8d, 0x43, 0x28, 0xa4, 0x57, 0x45, 0x5e, 0x99, 0x60, 0xc1, 0xd8, 0xbd, 0x91, 0x49, 0x76, 0xd9,
	0x48, 0x9f, 0x69, 0x40, 0xab, 0x9f, 0x7f, 0xfc, 0xfe, 0x9a, 0xb1, 0xe9, 0x42, 0x5d, 0xa6, 0x97,
	0x3f, 0x0a, 0x37, 0xad, 0xd5, 0x8d, 0x3f, 0x39, 0x98, 0x8c, 0xfc, 0x22, 0x2d, 0xc8, 0x69, 0x11,
	0x64, 0xd1, 0xa0, 0x33, 0xde, 0x88, 0x6d, 0x6e, 0xbe, 0xa9, 0x96, 0x2e, 0x61, 0x97, 0xab, 0xb4,
	0x58, 0xef, 0x20, 0x53, 0x9d, 0xbb, 0x7d, 0xb1, 0x69, 0xad, 0x92, 0x97, 0x30, 0xbb, 0xc3, 0xd5,
	0x68, 0xef, 0xe4, 0x79, 0x05, 0x71, 0xde, 0xfe, 0x7f, 0x9a, 0xde, 0x40, 0xe2, 0x05, 0x72, 0x2d,
	0x21, 0x1e, 0xa9, 0x90, 0xeb, 0x16, 0x39, 0x04, 0xc2, 0x78, 0xcf, 0x93, 0x8a, 0x87, 0xc6, 0x6e,
	0x8f, 0x69, 0x31, 0xde, 0xa4, 0x65, 0xec, 0x52, 0xa1, 0xd7, 0x93, 0x2e, 0x61, 0x4c, 0x5a, 0x3f,
	0x89, 0x96, 0xff, 0x83, 0xd6, 0xd2, 0x8e, 0xef, 0x6a, 0xac, 0x3d, 0xe3, 0x1b, 0x94, 0xb1, 0x01,
	0xa1, 0xa5, 0x51, 0x03, 0xa7, 0x7b, 0xac, 0x49, 0x5f, 0xc3, 0x14, 0xe3, 0x2e, 0xf7, 0xde, 0xf2,
	0xb1, 0xb4, 0xe7, 0xf2, 0x29, 0xe9, 0x0a, 0x92, 0xde, 0xa2, 0x76, 0x42, 0x3a, 0x18, 0xfa, 0x7e,
	0xfd, 0xc4, 0x78, 0x1a, 0x38, 0xf6, 0x33, 0xc8, 0xb5, 0x86, 0xb2, 0x3f, 0x6e, 0x75, 0xc6, 0x74,
	0xa5, 0xf3, 0xc8, 0x3e, 0x4b, 0x8a, 0x23, 0x76, 0xd9, 0xaf, 0x59, 0xeb, 0x16, 0xb9, 0x07, 0x79,
	0x7c, 0x11, 0x97, 0xf2, 0xe1, 0xcc, 0xdb, 0xa1, 0x13, 0xdb, 0x73, 0xdf, 0x4e, 0x2b, 0xd6, 0xf7,
	0xd3, 0x8a, 0xf5, 0xf3, 0xb4, 0x62, 0x7d, 0xf9, 0x55, 0x99, 0xe8, 0x4c, 0xe2, 0x2f, 0xe1, 0xee,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x42, 0x95, 0xe4, 0x4e, 0x06, 0x00, 0x00,
}
